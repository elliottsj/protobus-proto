syntax = "proto2";
option java_package = "com.elliottsj";
package protobus;

import "realtime.proto";

message FeedMessage {
  // Metadata about this feed and feed message.
  required FeedHeader header = 1;

  // Contents of the feed.
  repeated FeedEntity entity = 2;
}

/**
 * Metadata about a feed, included in feed messages.
 */
message FeedHeader {

  message Gtfs {
    // The full name of the organization that publishes the feed.
    optional string feed_publisher_name = 1;

    // The URL of the feed publishing organization's website.
    optional string feed_publisher_url = 2;

    // A IETF BCP 47 language code specifying the default language used for the text in this feed.
    optional string feed_lang = 3;

    // The feed provides complete and reliable schedule information for service in the period from the beginning of the
    // feed_start_date day to the end of the feed_end_date day in YYYYMMDD
    optional string feed_start_date = 4;
    optional string feed_end_date = 5;

    // The feed publisher can specify a string here that indicates the current version of their GTFS feed.
    optional string feed_version = 6;
  }

  message Nextbus {
    // Copyright text provided in every NextBus response
    required string feed_copyright = 1;
  }

  // Version of the feed specification.
  // The current version is 1.0.
  required string protobus_version = 1;

  // This timestamp identifies the moment when the content of this feed has been
  // created (in server time). In POSIX time (i.e., number of seconds since
  // January 1st 1970 00:00:00 UTC).
  required uint64 timestamp = 2;

  // GTFS fields
  optional Gtfs gtfs_fields = 3;

  // NextBus fields
  optional Nextbus nextbus_fields = 4;
}

// A definition (or update) of an entity in the transit feed.
message FeedEntity {
  // Data about the entity itself. Exactly one of the following fields must be present.
  oneof entity {
    Agency agency = 1;
    Stop stop = 2;
    Route route = 3;
    Trip trip = 4;
    StopTime stop_time = 5;
    Calendar calendar = 6;
    CalendarDate calendar_date = 7;
    FareAttribute fare_attribute = 8;
    FareRule fare_rule = 9;
    Shape shape = 10;
    Frequency frequency = 11;
    Transfer transfer = 12;

    transit_realtime.TripUpdate trip_update = 13;
    transit_realtime.VehiclePosition vehicle = 14;
    transit_realtime.Alert alert = 15;
  }
}

//
// Entities used in the feed.
//

/**
 * A transit agency with a data feed provided via NextBus, or provided via both NextBus and GTFS.
 */
message Agency {

  message Gtfs {
    // An ID that uniquely identifies a transit agency.
    optional string agency_id = 1;

    // The full name of the transit agency, as provided by GTFS.
    required string agency_name = 2;

    // The URL of the transit agency.
    required string agency_url = 3;

    // The timezone where the transit agency is located.
    required string agency_timezone = 4;

    // A two-letter ISO 639-1 code for the primary language used by this transit agency.
    optional string agency_lang = 5;

    // A single voice telephone number for the specified agency.
    optional string agency_phone = 6;

    // The URL of a web page that allows a rider to purchase tickets or other fare instruments for that agency online.
    optional string agency_fare_url = 7;
  }

  message Nextbus {
    // The unique identifier for the transit agency.
    required string agency_tag = 1;

    // The full name of the transit agency, as provided by NextBus.
    required string agency_title = 2;

    // The short title for a transit agency, if available.
    optional string agency_short_title = 3;

    // The region name for a transit agency.
    required string agency_region_title = 4;
  }

  // GTFS fields
  optional Gtfs gtfs_fields = 1;

  // NextBus fields
  optional Nextbus nextbus_fields = 2;
}

message Stop {

  message Gtfs {
    // An ID that uniquely identifies a stop or station.
    // Multiple routes may use the same stop. stop_id is dataset unique.
    // Usually matches Nextbus.stop_tag
    required string stop_id = 1;

    // Short text or a number that uniquely identifies the stop for passengers.
    // Usually matches Nextbus.stop_id
    optional string stop_code = 2;

    // The name of a stop or station.
    // Usually matches Nextbus.stop_title
    required string stop_name = 3;

    // A description of a stop.
    optional string stop_desc = 4;

    // The latitude of a stop or station. The field value must be a valid WGS 84 latitude.
    // Usually matches Nextbus.stop_lat
    required float stop_lat = 5;

    // The longitude of a stop or station. The field value must be a valid WGS 84 longitude value from -180 to 180.
    // Usually matches Nextbus.stop_lon
    required float stop_lon = 6;

    // The fare zone for a stop ID. Zone IDs are required if you want to provide fare information using fare_rules.txt.
    // If this stop ID represents a station, the zone ID is ignored.
    optional string zone_id = 7;

    // The URL of a web page about a particular stop.
    // This should be different from the agency_url and the route_url fields.
    // The value must be a fully qualified URL that includes http:// or https://,
    // and any special characters in the URL must be correctly escaped.
    // See http://www.w3.org/Addressing/URL/4_URI_Recommentations.html
    // for a description of how to create fully qualified URL values.
    optional string stop_url = 8;

    // Identifies whether this stop ID represents a stop or station.
    // If no location type is specified, or the location_type is blank, stop IDs are treated as stops.
    // Stations may have different properties from stops when they are represented on a map or used in trip planning.
    enum LocationType {
      // A location where passengers board or disembark from a transit vehicle.
      STOP = 0;
      // A physical structure or area that contains one or more stops.
      STATION = 1;
    }
    optional LocationType location_type = 9 [default = STOP];

    // For stops that are physically located inside stations,
    // the parent_station field identifies the station associated with the stop.
    // To use this field, stops.txt must also contain a row where this stop ID is assigned location type=1.
    optional string parent_station = 10;

    // The timezone in which this stop or station is located.
    // Please refer to Wikipedia List of Timezones for a list of valid values.
    // If omitted, the stop should be assumed to be located in the timezone specified by agency_timezone in agency.txt.

    // When a stop has a parent station, the stop is considered to be in the timezone specified by the parent
    // station's stop_timezone value. If the parent has no stop_timezone value,
    // the stops that belong to that station are assumed to be in the timezone specified by agency_timezone,
    // even if the stops have their own stop_timezone values. In other words,
    // if a given stop has a parent_station value, any stop_timezone value specified for that stop must be ignored.

    // Even if stop_timezone values are provided in stops.txt,
    //the times in stop_times.txt should continue to be specified as time since midnight in the
    // timezone specified by agency_timezone in agency.txt.
    // This ensures that the time values in a trip always increase over the course of a trip,
    // regardless of which timezones the trip crosses.
    required string stop_timezone = 11;

    // Whether wheelchair boardings are possible from the specified stop or station.
    enum WheelchairBoarding {
      // No accessibility information for the stop
      UNKNOWN = 0;

      // At least some vehicles at this stop can be boarded by a rider in a wheelchair
      ACCESSIBLE = 1;

      // Wheelchair boarding is not possible at this stop
      NOT_ACCESSIBLE = 2;
    }
    optional WheelchairBoarding wheelchair_boarding = 12 [default = UNKNOWN];
  }

  message Nextbus {
    // Unique alphanumeric identifier for stop, such as “cp_1321”.
    // Even if the stop tags appear to usually be numeric they can sometimes contain alphabetical characters.
    // Therefore the stop tags cannot be used as a number for telephone systems and other such applications.
    // For larger agencies such as Toronto TTC suffixes "_IB" and “_OB" are included at the end of the stop tag
    // for the rare situations when an agency has defined only a single stop for both directions
    // and the stop is not an arrival at the end of the route (in cases of arrivals “_ar” is used).
    // This means that the stop tag might not always correspond to GTFS or other configuration data.
    // These suffixes allow duplicate stops to have the identical stopID as the original stop
    // while preserving both unique stops in the system.
    // "_IB" represents a duplicated inbound stop, and "_OB" represents a duplicated outbound stop.
    required string stop_tag = 1;

    // The name of the stop to displayed in a user interface
    // Usually matches Gtfs.stop_name
    required string stop_title = 2;

    // A short version of the stop title
    optional string stop_short_title = 3;

    // The latitude of the stop
    // Usually matches Gtfs.stop_lat
    required float stop_lat = 4;

    // The longitude of the stop
    // Usually matches Gtfs.stop_lon
    required float stop_lon = 5;

    // Short text or a number that uniquely identifies the stop for passengers.
    // Usually matches Gtfs.stop_code
    optional string stop_id = 6;
  }

  // GTFS fields
  optional Gtfs gtfs_fields = 1;

  // NextBus fields
  optional Nextbus nextbus_fields = 2;

}

message Route {

  message Gtfs {
    // An ID that uniquely identifies a route.
    // The route_id is dataset unique.
    required string route_id = 1;

    // An agency for the specified route.
    // Use this field when you are providing data for routes from more than one agency.
    optional string agency_id = 2;

    // The short name of a route.
    // This will often be a short, abstract identifier like "32", "100X", or "Green"
    // that riders use to identify a route, but which doesn't give any indication of what places the route serves.
    // At least one of route_short_name or route_long_name must be specified, or potentially both if appropriate.
    // If the route does not have a short name,
    // please specify a route_long_name and use an empty string as the value for this field.
    required string route_short_name = 3;

    // The full name of a route.
    // This name is generally more descriptive than the route_short_name
    // and will often include the route's destination or stop.
    // At least one of route_short_name or route_long_name must be specified, or potentially both if appropriate.
    // If the route does not have a long name,
    // please specify a route_short_name and use an empty string as the value for this field.
    required string route_long_name = 4;

    // A description of a route.
    // Please provide useful, quality information. Do not simply duplicate the name of the route.
    // For example, "A trains operate between Inwood-207 St, Manhattan and Far Rockaway-Mott Avenue,
    // Queens at all times. Also from about 6AM until about midnight,
    // additional A trains operate between Inwood-207 St and Lefferts Boulevard
    // (trains typically alternate between Lefferts Blvd and Far Rockaway)."
    required string route_desc = 5;

    // The route_type field describes the type of transportation used on a route.
    enum RouteType {
      // Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.
      TRAM = 0;

      // Subway, Metro. Any underground rail system within a metropolitan area.
      SUBWAY = 1;

      // Rail. Used for intercity or long-distance travel.
      RAIL = 2;

      // Bus. Used for short- and long-distance bus routes.
      BUS = 3;

      // Ferry. Used for short- and long-distance boat service.
      FERRY = 4;

      // Cable car. Used for street-level cable cars where the cable runs beneath the car.
      CABLECAR = 5;

      // Gondola, Suspended cable car. Typically used for aerial cable cars where the car is suspended from the cable.
      GONDOLA = 6;

      // Funicular. Any rail system designed for steep inclines.
      FUNICULAR = 7;
    }
    optional RouteType route_type = 6;

    // The URL of a web page about that particular route. This should be different from the agency_url.
    // The value must be a fully qualified URL that includes http:// or https://,
    // and any special characters in the URL must be correctly escaped.
    // See http://www.w3.org/Addressing/URL/4_URI_Recommentations.html for a description of how to create fully qualified URL values.
    optional string route_url = 7;

    // In systems that have colors assigned to routes, the route_color field defines a color that corresponds to a route.
    // The color must be provided as a six-character hexadecimal number, for example, 00FFFF.
    // If no color is specified, the default route color is white (FFFFFF).
    optional string route_color = 8;

    // The route_text_color field can be used to specify a legible color to use for text drawn against a background of route_color.
    optional string route_text_color = 9;
  }

  message Nextbus {
    // TODO: documentation
    required string route_tag = 1;
    required string route_title = 2;
    optional string route_short_title = 3;
    required string route_color = 4;
    required string route_text_color = 5;
    required float route_lat_min = 6;
    required float route_lat_max = 7;
    required float route_lon_min = 8;
    required float route_lon_max = 9;
  }

  // GTFS fields
  optional Gtfs gtfs_fields = 1;

  // NextBus fields
  optional Nextbus nextbus_fields = 2;

}


message Trip {

  // TODO: document
  message Gtfs {
    // The route_id field contains an ID that uniquely identifies a route.
    required string route_id = 1;

    // The service_id contains an ID that uniquely identifies a set of dates when service is available for one or more routes.
    required string service_id = 2;

    // The trip_id field contains an ID that identifies a trip. The trip_id is dataset unique.
    required string trip_id = 3;

    // The trip_headsign field contains the text that appears on a sign that identifies the trip's destination to passengers.
    optional string trip_headsign = 4;

    // The trip_short_name field contains the text that appears in schedules and sign boards to identify the trip to passengers.
    optional string trip_short_name = 5;

    // The direction_id field contains a binary value that indicates the direction of travel for a trip.
    enum Direction {
      OUTBOUND = 0;
      INBOUND = 1;
    }
    optional Direction direction_id = 6;

    // The block_id field identifies the block to which the trip belongs.
    // A block consists of two or more sequential trips made using the same vehicle,
    // where a passenger can transfer from one trip to the next just by staying in the vehicle.
    optional string block_id = 7;

    // The shape_id field contains an ID that defines a shape for the trip.
    optional string shape_id = 8;

    enum WheelchairAccessible {
      // No accessibility information for the stop
      WHEELCHAIR_UNKNOWN = 0;

      // At least some vehicles at this stop can be boarded by a rider in a wheelchair
      WHEELCHAIR_ACCESSIBLE = 1;

      // Wheelchair boarding is not possible at this stop
      WHEELCHAIR_NOT_ACCESSIBLE = 2;
    }
    optional WheelchairAccessible wheelchair_accessible = 9;

    enum BikesAllowed {
      BIKES_UNKNOWN = 0;
      BIKES_ALLOWED = 1;
      BIKES_NOT_ALLOWED = 2;
    }
    optional BikesAllowed bikes_allowed = 10;
  }

  message Nextbus {

  }

  // GTFS fields
  optional Gtfs gtfs_fields = 1;

  // NextBus fields
  optional Nextbus nextbus_fields = 2;

}

message StopTime {
  // The trip_id field contains an ID that identifies a trip. The trip_id is dataset unique.
  required string trip_id = 1;

  required string arrival_time = 2;
  required string departure_time = 3;

  // TODO: Brian why not make this:
  // required int32 arrival_time_secs = 2;
  // required int32 departure_time_secs = 3;

  required string stop_id = 4;
  required string stop_sequence = 5;

  optional string stop_headsign = 6;

  enum AvailabilityType {
    // Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.
    REGULAR = 0;

    // Subway, Metro. Any underground rail system within a metropolitan area.
    NOT_AVAILABLE = 1;

    // Rail. Used for intercity or long-distance travel.
    PHONE = 2;

    // Bus. Used for short- and long-distance bus routes.
    DRIVER = 3;
  }
  optional AvailabilityType pickup_type = 7 [default = REGULAR];

  optional AvailabilityType drop_off_type = 8 [default = REGULAR];

  optional float shape_dist_traveled = 9;

  // The extensions namespace allows 3rd-party developers to extend the
  // GTFS specification in order to add and evaluate new features and
  // modifications to the spec.
  extensions 1100 to 1999;
}

message Calendar {
  // The trip_id field contains an ID that identifies a trip. The trip_id is dataset unique.
  required string service_id = 1;

  required bool monday = 2;
  required bool tuesday = 3;
  required bool wednesday = 4;
  required bool thursday = 5;
  required bool friday = 6;
  required bool saturday = 7;
  required bool sunday = 8;

  required string start_date = 9;
  required string end_date = 10;

  // The extensions namespace allows 3rd-party developers to extend the
  // GTFS specification in order to add and evaluate new features and
  // modifications to the spec.
  extensions 1100 to 1999;
}

message CalendarDate {
  // The trip_id field contains an ID that identifies a trip. The trip_id is dataset unique.
  required string service_id = 1;

  required string date = 2;

  enum ExceptionType {
    ADDED = 1;
    REMOVED = 2;
  }
  required ExceptionType exception_type = 3;

  // The extensions namespace allows 3rd-party developers to extend the
  // GTFS specification in order to add and evaluate new features and
  // modifications to the spec.
  extensions 1100 to 1999;
}

message FareAttribute {
  required string fare_id = 1;
  required float price = 2;
  required string currency_type = 3;

  enum PaymentMethod {
    ONBOARD = 1;
    PREBOARDING = 2;
  }
  required PaymentMethod payment_method = 4;

  enum Transfers {
    NO = 0;
    ONCE = 1;
    TWICE = 2;
    UNLIMITED = 3;
  }
  required Transfers transfers = 5;

  optional int32 transfer_duration = 6;

  // The extensions namespace allows 3rd-party developers to extend the
  // GTFS specification in order to add and evaluate new features and
  // modifications to the spec.
  extensions 1100 to 1999;
}

message FareRule {
  required string fare_id = 1;
  optional string route_id = 2;
  optional string origin_id = 3;
  optional string destination_id = 4;
  optional string contains_id = 5;
  // The extensions namespace allows 3rd-party developers to extend the
  // GTFS specification in order to add and evaluate new features and
  // modifications to the spec.
  extensions 1100 to 1999;
}

message Shape {
  required string shape_id = 1;
  optional float shape_pt_lat = 2;
  optional float shape_pt_lon = 3;
  optional int32 shape_pt_sequence = 4;
  optional float shape_dist_traveled = 5;

  // The extensions namespace allows 3rd-party developers to extend the
  // GTFS specification in order to add and evaluate new features and
  // modifications to the spec.
  extensions 1100 to 1999;
}

message Frequency {
  required string trip_id = 1;
  required string start_time = 2;
  required string end_time = 3;
  required int32 headway_secs = 4;
  enum ScheduleType {
    NOT_EXACTLY = 0;
    EXACTLY = 1;
  }
  optional ScheduleType exact_times = 5 [default = NOT_EXACTLY];
  // The extensions namespace allows 3rd-party developers to extend the
  // GTFS specification in order to add and evaluate new features and
  // modifications to the spec.
  extensions 1100 to 1999;
}

message Transfer {
  required string from_stop_id = 1;
  required string to_stop_id = 2;
  enum TransferType {
    RECOMMENDED = 0;
    TIMED = 1;
    MINIMUM = 2;
    NOT_POSSIBLE = 3;
  }
  required TransferType transfer_type = 3;

  optional int32 min_transfer_time = 4;
}
